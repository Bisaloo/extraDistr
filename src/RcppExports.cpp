// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cpp_dbbinom
NumericVector cpp_dbbinom(IntegerVector x, IntegerVector size, NumericVector alpha, NumericVector beta, bool log_prob);
RcppExport SEXP extraDistr_cpp_dbbinom(SEXP xSEXP, SEXP sizeSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dbbinom(x, size, alpha, beta, log_prob));
    return __result;
END_RCPP
}
// cpp_pbbinom
NumericVector cpp_pbbinom(IntegerVector x, IntegerVector size, NumericVector alpha, NumericVector beta, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_pbbinom(SEXP xSEXP, SEXP sizeSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_pbbinom(x, size, alpha, beta, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rbbinom
NumericVector cpp_rbbinom(int n, IntegerVector size, NumericVector alpha, NumericVector beta);
RcppExport SEXP extraDistr_cpp_rbbinom(SEXP nSEXP, SEXP sizeSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    __result = Rcpp::wrap(cpp_rbbinom(n, size, alpha, beta));
    return __result;
END_RCPP
}
// cpp_dbnbinom
NumericVector cpp_dbnbinom(IntegerVector x, IntegerVector size, NumericVector alpha, NumericVector beta, bool log_prob);
RcppExport SEXP extraDistr_cpp_dbnbinom(SEXP xSEXP, SEXP sizeSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dbnbinom(x, size, alpha, beta, log_prob));
    return __result;
END_RCPP
}
// cpp_pnbbinom
NumericVector cpp_pnbbinom(IntegerVector x, IntegerVector size, NumericVector alpha, NumericVector beta, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_pnbbinom(SEXP xSEXP, SEXP sizeSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_pnbbinom(x, size, alpha, beta, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rbnbinom
NumericVector cpp_rbnbinom(int n, IntegerVector size, NumericVector alpha, NumericVector beta);
RcppExport SEXP extraDistr_cpp_rbnbinom(SEXP nSEXP, SEXP sizeSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    __result = Rcpp::wrap(cpp_rbnbinom(n, size, alpha, beta));
    return __result;
END_RCPP
}
// cpp_dbnorm
NumericVector cpp_dbnorm(NumericMatrix x, double mu1, double mu2, double sigma1, double sigma2, double rho, bool log_prob);
RcppExport SEXP extraDistr_cpp_dbnorm(SEXP xSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP sigma1SEXP, SEXP sigma2SEXP, SEXP rhoSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dbnorm(x, mu1, mu2, sigma1, sigma2, rho, log_prob));
    return __result;
END_RCPP
}
// cpp_pbnorm
NumericVector cpp_pbnorm(NumericMatrix x, double mu1, double mu2, double sigma1, double sigma2, double rho, bool lower_tail, bool log_prob, int nsim);
RcppExport SEXP extraDistr_cpp_pbnorm(SEXP xSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP sigma1SEXP, SEXP sigma2SEXP, SEXP rhoSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP, SEXP nsimSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    __result = Rcpp::wrap(cpp_pbnorm(x, mu1, mu2, sigma1, sigma2, rho, lower_tail, log_prob, nsim));
    return __result;
END_RCPP
}
// cpp_rbnorm
NumericMatrix cpp_rbnorm(int n, double mu1, double mu2, double sigma1, double sigma2, double rho);
RcppExport SEXP extraDistr_cpp_rbnorm(SEXP nSEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP sigma1SEXP, SEXP sigma2SEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma1(sigma1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    __result = Rcpp::wrap(cpp_rbnorm(n, mu1, mu2, sigma1, sigma2, rho));
    return __result;
END_RCPP
}
// cpp_ddirichlet
NumericVector cpp_ddirichlet(NumericMatrix x, NumericVector alpha, bool log_prob);
RcppExport SEXP extraDistr_cpp_ddirichlet(SEXP xSEXP, SEXP alphaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_ddirichlet(x, alpha, log_prob));
    return __result;
END_RCPP
}
// cpp_pdirichlet
NumericVector cpp_pdirichlet(NumericMatrix x, NumericVector alpha, bool lower_tail, bool log_prob, int nsim);
RcppExport SEXP extraDistr_cpp_pdirichlet(SEXP xSEXP, SEXP alphaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP, SEXP nsimSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    __result = Rcpp::wrap(cpp_pdirichlet(x, alpha, lower_tail, log_prob, nsim));
    return __result;
END_RCPP
}
// cpp_rdirichlet
NumericMatrix cpp_rdirichlet(int n, NumericVector alpha);
RcppExport SEXP extraDistr_cpp_rdirichlet(SEXP nSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    __result = Rcpp::wrap(cpp_rdirichlet(n, alpha));
    return __result;
END_RCPP
}
// cpp_ddweibull
NumericVector cpp_ddweibull(IntegerVector x, NumericVector q, NumericVector beta, bool log_prob);
RcppExport SEXP extraDistr_cpp_ddweibull(SEXP xSEXP, SEXP qSEXP, SEXP betaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_ddweibull(x, q, beta, log_prob));
    return __result;
END_RCPP
}
// cpp_pdweibull
NumericVector cpp_pdweibull(IntegerVector x, NumericVector q, NumericVector beta, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_pdweibull(SEXP xSEXP, SEXP qSEXP, SEXP betaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_pdweibull(x, q, beta, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_qdweibull
NumericVector cpp_qdweibull(NumericVector p, NumericVector q, NumericVector beta, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_qdweibull(SEXP pSEXP, SEXP qSEXP, SEXP betaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_qdweibull(p, q, beta, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rdweibull
NumericVector cpp_rdweibull(int n, NumericVector q, NumericVector beta);
RcppExport SEXP extraDistr_cpp_rdweibull(SEXP nSEXP, SEXP qSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    __result = Rcpp::wrap(cpp_rdweibull(n, q, beta));
    return __result;
END_RCPP
}
// cpp_dfrechet
NumericVector cpp_dfrechet(NumericVector x, NumericVector lambda, NumericVector mu, NumericVector sigma, bool log_prob);
RcppExport SEXP extraDistr_cpp_dfrechet(SEXP xSEXP, SEXP lambdaSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dfrechet(x, lambda, mu, sigma, log_prob));
    return __result;
END_RCPP
}
// cpp_pfrechet
NumericVector cpp_pfrechet(NumericVector x, NumericVector lambda, NumericVector mu, NumericVector sigma, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_pfrechet(SEXP xSEXP, SEXP lambdaSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_pfrechet(x, lambda, mu, sigma, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_qfrechet
NumericVector cpp_qfrechet(NumericVector p, NumericVector lambda, NumericVector mu, NumericVector sigma, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_qfrechet(SEXP pSEXP, SEXP lambdaSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_qfrechet(p, lambda, mu, sigma, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rfrechet
NumericVector cpp_rfrechet(int n, NumericVector lambda, NumericVector mu, NumericVector sigma);
RcppExport SEXP extraDistr_cpp_rfrechet(SEXP nSEXP, SEXP lambdaSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(cpp_rfrechet(n, lambda, mu, sigma));
    return __result;
END_RCPP
}
// cpp_dgpois
NumericVector cpp_dgpois(IntegerVector x, NumericVector alpha, NumericVector beta, bool log_prob);
RcppExport SEXP extraDistr_cpp_dgpois(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dgpois(x, alpha, beta, log_prob));
    return __result;
END_RCPP
}
// cpp_pgpois
NumericVector cpp_pgpois(IntegerVector x, NumericVector alpha, NumericVector beta, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_pgpois(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_pgpois(x, alpha, beta, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rgpois
NumericVector cpp_rgpois(int n, NumericVector alpha, NumericVector beta);
RcppExport SEXP extraDistr_cpp_rgpois(SEXP nSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    __result = Rcpp::wrap(cpp_rgpois(n, alpha, beta));
    return __result;
END_RCPP
}
// cpp_dgev
NumericVector cpp_dgev(NumericVector x, NumericVector mu, NumericVector sigma, NumericVector xi, bool log_prob);
RcppExport SEXP extraDistr_cpp_dgev(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP xiSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dgev(x, mu, sigma, xi, log_prob));
    return __result;
END_RCPP
}
// cpp_pgev
NumericVector cpp_pgev(NumericVector x, NumericVector mu, NumericVector sigma, NumericVector xi, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_pgev(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP xiSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_pgev(x, mu, sigma, xi, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_qgev
NumericVector cpp_qgev(NumericVector p, NumericVector mu, NumericVector sigma, NumericVector xi, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_qgev(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP xiSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_qgev(p, mu, sigma, xi, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rgev
NumericVector cpp_rgev(int n, NumericVector mu, NumericVector sigma, NumericVector xi);
RcppExport SEXP extraDistr_cpp_rgev(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xi(xiSEXP);
    __result = Rcpp::wrap(cpp_rgev(n, mu, sigma, xi));
    return __result;
END_RCPP
}
// cpp_dgompertz
NumericVector cpp_dgompertz(NumericVector x, NumericVector a, NumericVector b, bool log_prob);
RcppExport SEXP extraDistr_cpp_dgompertz(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dgompertz(x, a, b, log_prob));
    return __result;
END_RCPP
}
// cpp_pgompertz
NumericVector cpp_pgompertz(NumericVector x, NumericVector a, NumericVector b, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_pgompertz(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_pgompertz(x, a, b, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_qgompertz
NumericVector cpp_qgompertz(NumericVector p, NumericVector a, NumericVector b, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_qgompertz(SEXP pSEXP, SEXP aSEXP, SEXP bSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_qgompertz(p, a, b, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rgompertz
NumericVector cpp_rgompertz(int n, NumericVector a, NumericVector b);
RcppExport SEXP extraDistr_cpp_rgompertz(SEXP nSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    __result = Rcpp::wrap(cpp_rgompertz(n, a, b));
    return __result;
END_RCPP
}
// cpp_dgpd
NumericVector cpp_dgpd(NumericVector x, NumericVector mu, NumericVector sigma, NumericVector xi, bool log_prob);
RcppExport SEXP extraDistr_cpp_dgpd(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP xiSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dgpd(x, mu, sigma, xi, log_prob));
    return __result;
END_RCPP
}
// cpp_pgpd
NumericVector cpp_pgpd(NumericVector x, NumericVector mu, NumericVector sigma, NumericVector xi, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_pgpd(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP xiSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_pgpd(x, mu, sigma, xi, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_qgpd
NumericVector cpp_qgpd(NumericVector p, NumericVector mu, NumericVector sigma, NumericVector xi, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_qgpd(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP xiSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_qgpd(p, mu, sigma, xi, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rgpd
NumericVector cpp_rgpd(int n, NumericVector mu, NumericVector sigma, NumericVector xi);
RcppExport SEXP extraDistr_cpp_rgpd(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type xi(xiSEXP);
    __result = Rcpp::wrap(cpp_rgpd(n, mu, sigma, xi));
    return __result;
END_RCPP
}
// cpp_dgumbel
NumericVector cpp_dgumbel(NumericVector x, NumericVector mu, NumericVector sigma, bool log_prob);
RcppExport SEXP extraDistr_cpp_dgumbel(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dgumbel(x, mu, sigma, log_prob));
    return __result;
END_RCPP
}
// cpp_pgumbel
NumericVector cpp_pgumbel(NumericVector x, NumericVector mu, NumericVector sigma, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_pgumbel(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_pgumbel(x, mu, sigma, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_qgumbel
NumericVector cpp_qgumbel(NumericVector p, NumericVector mu, NumericVector sigma, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_qgumbel(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_qgumbel(p, mu, sigma, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rgumbel
NumericVector cpp_rgumbel(int n, NumericVector mu, NumericVector sigma);
RcppExport SEXP extraDistr_cpp_rgumbel(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(cpp_rgumbel(n, mu, sigma));
    return __result;
END_RCPP
}
// cpp_dinvgamma
NumericVector cpp_dinvgamma(NumericVector x, NumericVector alpha, NumericVector beta, bool log_prob);
RcppExport SEXP extraDistr_cpp_dinvgamma(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dinvgamma(x, alpha, beta, log_prob));
    return __result;
END_RCPP
}
// cpp_pinvgamma
NumericVector cpp_pinvgamma(NumericVector x, NumericVector alpha, NumericVector beta, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_pinvgamma(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_pinvgamma(x, alpha, beta, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rinvgamma
NumericVector cpp_rinvgamma(int n, NumericVector alpha, NumericVector beta);
RcppExport SEXP extraDistr_cpp_rinvgamma(SEXP nSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    __result = Rcpp::wrap(cpp_rinvgamma(n, alpha, beta));
    return __result;
END_RCPP
}
// cpp_dkumar
NumericVector cpp_dkumar(NumericVector x, NumericVector a, NumericVector b, bool log_prob);
RcppExport SEXP extraDistr_cpp_dkumar(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dkumar(x, a, b, log_prob));
    return __result;
END_RCPP
}
// cpp_pkumar
NumericVector cpp_pkumar(NumericVector x, NumericVector a, NumericVector b, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_pkumar(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_pkumar(x, a, b, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_qkumar
NumericVector cpp_qkumar(NumericVector p, NumericVector a, NumericVector b, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_qkumar(SEXP pSEXP, SEXP aSEXP, SEXP bSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_qkumar(p, a, b, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rkumar
NumericVector cpp_rkumar(int n, NumericVector a, NumericVector b);
RcppExport SEXP extraDistr_cpp_rkumar(SEXP nSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    __result = Rcpp::wrap(cpp_rkumar(n, a, b));
    return __result;
END_RCPP
}
// cpp_dlaplace
NumericVector cpp_dlaplace(NumericVector x, NumericVector mu, NumericVector sigma, bool log_prob);
RcppExport SEXP extraDistr_cpp_dlaplace(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dlaplace(x, mu, sigma, log_prob));
    return __result;
END_RCPP
}
// cpp_plaplace
NumericVector cpp_plaplace(NumericVector x, NumericVector mu, NumericVector sigma, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_plaplace(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_plaplace(x, mu, sigma, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_qlaplace
NumericVector cpp_qlaplace(NumericVector p, NumericVector mu, NumericVector sigma, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_qlaplace(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_qlaplace(p, mu, sigma, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rlaplace
NumericVector cpp_rlaplace(int n, NumericVector mu, NumericVector sigma);
RcppExport SEXP extraDistr_cpp_rlaplace(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(cpp_rlaplace(n, mu, sigma));
    return __result;
END_RCPP
}
// cpp_dlgser
NumericVector cpp_dlgser(IntegerVector x, NumericVector theta, bool log_prob);
RcppExport SEXP extraDistr_cpp_dlgser(SEXP xSEXP, SEXP thetaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dlgser(x, theta, log_prob));
    return __result;
END_RCPP
}
// cpp_plgser
NumericVector cpp_plgser(IntegerVector x, NumericVector theta, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_plgser(SEXP xSEXP, SEXP thetaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_plgser(x, theta, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rlgser
NumericVector cpp_rlgser(int n, NumericVector theta);
RcppExport SEXP extraDistr_cpp_rlgser(SEXP nSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    __result = Rcpp::wrap(cpp_rlgser(n, theta));
    return __result;
END_RCPP
}
// cpp_dlomax
NumericVector cpp_dlomax(NumericVector x, NumericVector lambda, NumericVector kappa, bool log_prob);
RcppExport SEXP extraDistr_cpp_dlomax(SEXP xSEXP, SEXP lambdaSEXP, SEXP kappaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dlomax(x, lambda, kappa, log_prob));
    return __result;
END_RCPP
}
// cpp_plomax
NumericVector cpp_plomax(NumericVector x, NumericVector lambda, NumericVector kappa, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_plomax(SEXP xSEXP, SEXP lambdaSEXP, SEXP kappaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_plomax(x, lambda, kappa, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_qlomax
NumericVector cpp_qlomax(NumericVector p, NumericVector lambda, NumericVector kappa, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_qlomax(SEXP pSEXP, SEXP lambdaSEXP, SEXP kappaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_qlomax(p, lambda, kappa, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rlomax
NumericVector cpp_rlomax(int n, NumericVector lambda, NumericVector kappa);
RcppExport SEXP extraDistr_cpp_rlomax(SEXP nSEXP, SEXP lambdaSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa(kappaSEXP);
    __result = Rcpp::wrap(cpp_rlomax(n, lambda, kappa));
    return __result;
END_RCPP
}
// cpp_dpareto
NumericVector cpp_dpareto(NumericVector x, NumericVector a, NumericVector b, bool log_prob);
RcppExport SEXP extraDistr_cpp_dpareto(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dpareto(x, a, b, log_prob));
    return __result;
END_RCPP
}
// cpp_ppareto
NumericVector cpp_ppareto(NumericVector x, NumericVector a, NumericVector b, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_ppareto(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_ppareto(x, a, b, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_qpareto
NumericVector cpp_qpareto(NumericVector p, NumericVector a, NumericVector b, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_qpareto(SEXP pSEXP, SEXP aSEXP, SEXP bSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_qpareto(p, a, b, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rpareto
NumericVector cpp_rpareto(int n, NumericVector a, NumericVector b);
RcppExport SEXP extraDistr_cpp_rpareto(SEXP nSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    __result = Rcpp::wrap(cpp_rpareto(n, a, b));
    return __result;
END_RCPP
}
// cpp_rpbinom
NumericVector cpp_rpbinom(int n, NumericVector prob);
RcppExport SEXP extraDistr_cpp_rpbinom(SEXP nSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    __result = Rcpp::wrap(cpp_rpbinom(n, prob));
    return __result;
END_RCPP
}
// sim_dpbinom
NumericVector sim_dpbinom(NumericVector prob, int nsim);
RcppExport SEXP extraDistr_sim_dpbinom(SEXP probSEXP, SEXP nsimSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    __result = Rcpp::wrap(sim_dpbinom(prob, nsim));
    return __result;
END_RCPP
}
// rna_ppbinom
NumericVector rna_ppbinom(NumericVector prob);
RcppExport SEXP extraDistr_rna_ppbinom(SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    __result = Rcpp::wrap(rna_ppbinom(prob));
    return __result;
END_RCPP
}
// cpp_dpower
NumericVector cpp_dpower(NumericVector x, NumericVector alpha, NumericVector beta, bool log_prob);
RcppExport SEXP extraDistr_cpp_dpower(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dpower(x, alpha, beta, log_prob));
    return __result;
END_RCPP
}
// cpp_ppower
NumericVector cpp_ppower(NumericVector x, NumericVector alpha, NumericVector beta, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_ppower(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_ppower(x, alpha, beta, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_qpower
NumericVector cpp_qpower(NumericVector p, NumericVector alpha, NumericVector beta, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_qpower(SEXP pSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_qpower(p, alpha, beta, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rpower
NumericVector cpp_rpower(int n, NumericVector alpha, NumericVector beta);
RcppExport SEXP extraDistr_cpp_rpower(SEXP nSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    __result = Rcpp::wrap(cpp_rpower(n, alpha, beta));
    return __result;
END_RCPP
}
// cpp_drayleigh
NumericVector cpp_drayleigh(NumericVector x, NumericVector sigma, bool log_prob);
RcppExport SEXP extraDistr_cpp_drayleigh(SEXP xSEXP, SEXP sigmaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_drayleigh(x, sigma, log_prob));
    return __result;
END_RCPP
}
// cpp_prayleigh
NumericVector cpp_prayleigh(NumericVector x, NumericVector sigma, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_prayleigh(SEXP xSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_prayleigh(x, sigma, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_qrayleigh
NumericVector cpp_qrayleigh(NumericVector p, NumericVector sigma, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_qrayleigh(SEXP pSEXP, SEXP sigmaSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_qrayleigh(p, sigma, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rrayleigh
NumericVector cpp_rrayleigh(int n, NumericVector sigma);
RcppExport SEXP extraDistr_cpp_rrayleigh(SEXP nSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(cpp_rrayleigh(n, sigma));
    return __result;
END_RCPP
}
// cpp_dtriang
NumericVector cpp_dtriang(NumericVector x, NumericVector a, NumericVector b, NumericVector c, bool log_prob);
RcppExport SEXP extraDistr_cpp_dtriang(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dtriang(x, a, b, c, log_prob));
    return __result;
END_RCPP
}
// cpp_ptriang
NumericVector cpp_ptriang(NumericVector x, NumericVector a, NumericVector b, NumericVector c, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_ptriang(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_ptriang(x, a, b, c, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_qtriang
NumericVector cpp_qtriang(NumericVector p, NumericVector a, NumericVector b, NumericVector c, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_qtriang(SEXP pSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_qtriang(p, a, b, c, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rtriang
NumericVector cpp_rtriang(int n, NumericVector a, NumericVector b, NumericVector c);
RcppExport SEXP extraDistr_cpp_rtriang(SEXP nSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c(cSEXP);
    __result = Rcpp::wrap(cpp_rtriang(n, a, b, c));
    return __result;
END_RCPP
}
// cpp_dtnorm
NumericVector cpp_dtnorm(NumericVector x, NumericVector mu, NumericVector sigma, NumericVector a, NumericVector b, bool log_prob);
RcppExport SEXP extraDistr_cpp_dtnorm(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_dtnorm(x, mu, sigma, a, b, log_prob));
    return __result;
END_RCPP
}
// cpp_ptnorm
NumericVector cpp_ptnorm(NumericVector x, NumericVector mu, NumericVector sigma, NumericVector a, NumericVector b, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_ptnorm(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_ptnorm(x, mu, sigma, a, b, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_qtnorm
NumericVector cpp_qtnorm(NumericVector p, NumericVector mu, NumericVector sigma, NumericVector a, NumericVector b, bool lower_tail, bool log_prob);
RcppExport SEXP extraDistr_cpp_qtnorm(SEXP pSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP lower_tailSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    __result = Rcpp::wrap(cpp_qtnorm(p, mu, sigma, a, b, lower_tail, log_prob));
    return __result;
END_RCPP
}
// cpp_rtnorm
NumericVector cpp_rtnorm(int n, NumericVector mu, NumericVector sigma, NumericVector a, NumericVector b);
RcppExport SEXP extraDistr_cpp_rtnorm(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    __result = Rcpp::wrap(cpp_rtnorm(n, mu, sigma, a, b));
    return __result;
END_RCPP
}
